input {
  beats {
    port => 5044
  }
}

filter {
  # Xử lý log từ service rng (bao gồm cả rng và elk_stack_rng)
  if [container][image][name] =~ /.*rng.*/ {
    mutate {
      add_field => { "service_name" => "rng" }
      add_tag => [ "rng_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_rng"]
    }
  }
  
  # Xử lý log từ service hasher (bao gồm cả hasher và elk_stack_hasher)
  else if [container][image][name] =~ /.*hasher.*/ {
    mutate {
      add_field => { "service_name" => "hasher" }
      add_tag => [ "hasher_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_hasher"]
    }
  }
  
  # Xử lý log từ service worker (bao gồm cả worker và elk_stack_worker)
  else if [container][image][name] =~ /.*worker.*/ {
    mutate {
      add_field => { "service_name" => "worker" }
      add_tag => [ "worker_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_worker"]
    }
  }
  
  # Xử lý log từ service webui (bao gồm cả webui và elk_stack_webui)
  else if [container][image][name] =~ /.*webui.*/ or [container][image][name] =~ /.*result.*/ {
    mutate {
      add_field => { "service_name" => "webui" }
      add_tag => [ "webui_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_webui"]
    }
  }
  
  # Xử lý log từ service redis
  else if [container][image][name] =~ /.*redis.*/ {
    mutate {
      add_field => { "service_name" => "redis" }
      add_tag => [ "redis_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_redis"]
    }
  }
  
  # Xử lý log cho các service của ELK Stack
  else if [container][image][name] =~ /.*elasticsearch.*/ {
    mutate {
      add_field => { "service_name" => "elasticsearch" }
      add_tag => [ "elasticsearch_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_elasticsearch"]
    }
  }
  else if [container][image][name] =~ /.*kibana.*/ {
    mutate {
      add_field => { "service_name" => "kibana" }
      add_tag => [ "kibana_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_kibana"]
    }
  }
  else if [container][image][name] =~ /.*logstash.*/ {
    mutate {
      add_field => { "service_name" => "logstash" }
      add_tag => [ "logstash_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_logstash"]
    }
  }
  else if [container][image][name] =~ /.*filebeat.*/ {
    mutate {
      add_field => { "service_name" => "filebeat" }
      add_tag => [ "filebeat_service" ]
    }
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}" }
      tag_on_failure => ["_grokparsefailure_filebeat"]
    }
  }
  
  # Xử lý mặc định cho các log không khớp với pattern trên
  else {
    mutate {
      add_field => { "service_name" => "unknown" }
      add_tag => [ "unknown_service" ]
    }
    grok {
      match => { "message" => "%{GREEDYDATA:raw_message}" }
    }
  }
  
  # Xử lý thời gian nếu có trường timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
  }
  
  # Lọc log cấp độ ERROR
  if [log_level] == "ERROR" or [log_level] == "FATAL" {
    mutate {
      add_tag => [ "error_log" ]
    }
  }
  
  # Lọc thông tin quan trọng
  if [message] =~ /exception|error|failed|timeout|critical|warning|warn/ {
    mutate {
      add_tag => [ "important" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logs-%{service_name}-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }  # In log ra console để debug
}
